package com.scifilearn.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.util.*;

@RestController
@RequestMapping("/api")
public class ApiController {

    @Value("${mistral.api.key}")
    private String mistralApiKey;

    @Value("${mistral.api.url}")
    private String mistralApiUrl;

    private List<Map<String, Object>> books = new ArrayList<>();

    @PostMapping("/admin/books")
    public Map<String, Object> uploadBook(@RequestParam String title,
                                          @RequestParam String authors,
                                          @RequestParam MultipartFile file) {
        Map<String, Object> book = new HashMap<>();
        book.put("id", UUID.randomUUID().toString());
        book.put("title", title);
        book.put("authors", Arrays.asList(authors.split(",")));
        book.put("pdfUrl", "/pdfs/" + file.getOriginalFilename());
        books.add(book);
        return book;
    }

    @GetMapping("/admin/books")
    public List<Map<String, Object>> getBooks() {
        return books;
    }

    @PostMapping("/ai/chat")
    public Map<String, String> chat(@RequestBody Map<String, String> payload) {
        String message = payload.get("message");
        String mistralResponse = callMistralOfficial(message);
        String ollamaResponse = callOllama(message);

        String combined = "Mistral: " + mistralResponse + "\n\n Ollama: " + ollamaResponse;
        return Map.of("answer", combined);
    }

    // API oficial Mistral
    private String callMistralOfficial(String message) {
        try {
            RestTemplate rest = new RestTemplate();

            Map<String, Object> requestBody = Map.of(
                    "model", "mistral-medium", // ou "mistral-small"
                    "messages", List.of(Map.of("role", "user", "content", message))
            );

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setBearerAuth(mistralApiKey);

            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);
            ResponseEntity<Map> response = rest.postForEntity(mistralApiUrl, entity, Map.class);

            List<Map<String, Object>> choices = (List<Map<String, Object>>) response.getBody().get("choices");
            if (choices != null && !choices.isEmpty()) {
                Map<String, Object> messageData = (Map<String, Object>) choices.get(0).get("message");
                return messageData.get("content").toString();
            } else {
                return "Sem resposta do Mistral.";
            }
        } catch (Exception e) {
            return "Erro Mistral: " + e.getMessage();
        }
    }

    // fallback para Ollama local
    private String callOllama(String message) {
        try {
            RestTemplate rest = new RestTemplate();
            Map<String, String> body = Map.of("prompt", message);
            ResponseEntity<Map> resp = rest.postForEntity("http://ollama:11434/generate", body, Map.class);
            return resp.getBody().getOrDefault("output", "Sem resposta Ollama").toString();
        } catch (Exception e) {
            return "Erro Ollama: " + e.getMessage();
        }
    }
}
